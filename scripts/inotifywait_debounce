#!/usr/bin/env node

let debounceMs = parseInt(process.argv[2])
let line = ""
let timeouts = {}
process.stdin.on("data", (chunk) => {
    const data = chunk.toString()
    for (let i = 0; i < data.length; i++) {
        if (data[i] === "\n") {
            processLine(line)
            line = ""
        } else {
            line += data[i]
        }
    }
})

function processLine(line) {
    const split = line.split(" ")
    const debounceKey = split[0] + split[2]
    clearTimeout(timeouts[debounceKey])
    timeouts[debounceKey] = setTimeout(function () {
        process.stdout.write(line + "\n")
    }, debounceMs)
}

// const EventEmitter = require('events');
//
// function stdinLineByLine() {
//   const stdin = new EventEmitter();
//   let buff = '';
//
//   process.stdin
//     .on('data', data => {
//       buff += data;
//       lines = buff.split(/\r\n|\n/);
//       buff = lines.pop();
//       lines.forEach(line => stdin.emit('line', line));
//     })
//     .on('end', () => {
//       if (buff.length > 0) stdin.emit('line', buff);
//     });
//
//   return stdin;
// }
//
// const stdin = stdinLineByLine();
// stdin.on('line', console.log);
